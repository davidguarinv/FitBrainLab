"""add week columns

Revision ID: f1856de0ceb8
Revises: 
Create Date: 2025-06-02 14:03:34.042264

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'f1856de0ceb8'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('achievement')
    op.drop_table('fun_fact')
    with op.batch_alter_table('challenge_of_the_week', schema=None) as batch_op:
        batch_op.add_column(sa.Column('user_id', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('last_completed', sa.Date(), nullable=True))
        batch_op.add_column(sa.Column('times_completed', sa.Integer(), nullable=True))
        batch_op.drop_constraint('challenge_of_the_week_week_number_year_key', type_='unique')
        batch_op.create_unique_constraint('_user_cotw_week_uc', ['user_id', 'week_number', 'year'])
        batch_op.drop_constraint('challenge_of_the_week_challenge_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'user', ['user_id'], ['id'])
        batch_op.create_foreign_key(None, 'challenge', ['challenge_id'], ['id'])

    with op.batch_alter_table('challenge_regeneration', schema=None) as batch_op:
        batch_op.drop_constraint('challenge_regeneration_user_id_difficulty_slot_number_key', type_='unique')
        batch_op.drop_constraint('challenge_regeneration_user_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'user', ['user_id'], ['id'])

    with op.batch_alter_table('completed_challenge', schema=None) as batch_op:
        batch_op.drop_index('idx_completed_challenge_user_id')
        batch_op.drop_index('idx_completed_challenge_week_year')
        batch_op.drop_constraint('completed_challenge_challenge_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('completed_challenge_user_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'user', ['user_id'], ['id'])
        batch_op.create_foreign_key(None, 'challenge', ['challenge_id'], ['id'])
        batch_op.drop_column('year')
        batch_op.drop_column('week_number')
        batch_op.drop_column('friend_linked')

    with op.batch_alter_table('friend_challenge_link', schema=None) as batch_op:
        batch_op.add_column(sa.Column('user1_id', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('user2_id', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('user1_confirmed', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('user2_confirmed', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('user1_completed', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('user2_completed', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('user1_completed_at', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('user2_completed_at', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('completion_expires_at', sa.DateTime(), nullable=True))
        batch_op.drop_constraint('friend_challenge_link_initiator_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('friend_challenge_link_recipient_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('friend_challenge_link_challenge_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'user', ['user1_id'], ['id'])
        batch_op.create_foreign_key(None, 'challenge', ['challenge_id'], ['id'])
        batch_op.drop_column('recipient_code')
        batch_op.drop_column('recipient_id')
        batch_op.drop_column('completed_at')
        batch_op.drop_column('initiator_id')
        batch_op.drop_column('status')

    with op.batch_alter_table('friend_token_usage', schema=None) as batch_op:
        batch_op.alter_column('used_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.drop_index('idx_friend_token_weekly', postgresql_where='(is_weekly = true)')
        batch_op.drop_constraint('friend_token_usage_user_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'user', ['user_id'], ['id'])
        batch_op.drop_column('is_weekly')
        batch_op.drop_column('year')
        batch_op.drop_column('week_number')

    with op.batch_alter_table('notification', schema=None) as batch_op:
        batch_op.add_column(sa.Column('read', sa.Boolean(), nullable=True))
        batch_op.drop_constraint('notification_user_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'user', ['user_id'], ['id'])
        batch_op.drop_column('type')
        batch_op.drop_column('title')
        batch_op.drop_column('is_read')

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_index('idx_user_username')

    with op.batch_alter_table('user_achievement', schema=None) as batch_op:
        batch_op.drop_constraint('user_achievement_user_id_achievement_id_key', type_='unique')
        batch_op.create_unique_constraint('_user_achievement_uc', ['user_id', 'achievement_id'])
        batch_op.drop_constraint('user_achievement_user_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'user', ['user_id'], ['id'])

    with op.batch_alter_table('user_challenge', schema=None) as batch_op:
        batch_op.add_column(sa.Column('completed_at', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('points_earned', sa.Integer(), nullable=True))
        batch_op.alter_column('week_number',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('1'))
        batch_op.alter_column('year',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('2025'))
        batch_op.alter_column('status',
               existing_type=sa.VARCHAR(length=10),
               nullable=False,
               existing_server_default=sa.text("'pending'::character varying"))
        batch_op.drop_index('idx_user_challenge_user_id')
        batch_op.drop_constraint('user_challenge_user_id_challenge_id_key', type_='unique')
        batch_op.create_unique_constraint('_user_challenge_week_uc', ['user_id', 'challenge_id', 'week_number', 'year'])
        batch_op.drop_constraint('user_challenge_challenge_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('user_challenge_user_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'challenge', ['challenge_id'], ['id'])
        batch_op.create_foreign_key(None, 'user', ['user_id'], ['id'])

    with op.batch_alter_table('user_weekly_order', schema=None) as batch_op:
        batch_op.add_column(sa.Column('challenge_id', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('difficulty', sa.String(length=1), nullable=False))
        batch_op.add_column(sa.Column('order_position', sa.Integer(), nullable=False))
        batch_op.drop_constraint('user_weekly_order_user_id_week_number_year_key', type_='unique')
        batch_op.create_unique_constraint('_user_week_challenge_uc', ['user_id', 'week_number', 'year', 'challenge_id'])
        batch_op.create_unique_constraint('_user_week_diff_pos_uc', ['user_id', 'week_number', 'year', 'difficulty', 'order_position'])
        batch_op.drop_constraint('user_weekly_order_user_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'challenge', ['challenge_id'], ['id'])
        batch_op.create_foreign_key(None, 'user', ['user_id'], ['id'])
        batch_op.drop_column('challenge_order')

    with op.batch_alter_table('weekly_challenge_set', schema=None) as batch_op:
        batch_op.drop_index('idx_weekly_challenge_set_week_year')
        batch_op.drop_constraint('weekly_challenge_set_week_number_year_challenge_id_key', type_='unique')
        batch_op.create_unique_constraint('_week_challenge_uc', ['week_number', 'year', 'challenge_id'])
        batch_op.drop_constraint('weekly_challenge_set_challenge_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'challenge', ['challenge_id'], ['id'])

    with op.batch_alter_table('weekly_habit_challenge', schema=None) as batch_op:
        batch_op.add_column(sa.Column('challenge_id', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('days_completed', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('bonus_points_earned', sa.Integer(), nullable=True))
        batch_op.drop_constraint('weekly_habit_challenge_user_id_week_number_year_key', type_='unique')
        batch_op.create_unique_constraint('_user_habit_week_uc', ['user_id', 'week_number', 'year'])
        batch_op.drop_constraint('weekly_habit_challenge_user_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'user', ['user_id'], ['id'])
        batch_op.create_foreign_key(None, 'challenge', ['challenge_id'], ['id'])
        batch_op.drop_column('description')
        batch_op.drop_column('completed')
        batch_op.drop_column('points')
        batch_op.drop_column('last_checkin')
        batch_op.drop_column('title')
        batch_op.drop_column('checkin_streak')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('weekly_habit_challenge', schema=None) as batch_op:
        batch_op.add_column(sa.Column('checkin_streak', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('title', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('last_checkin', sa.DATE(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('points', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('completed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('description', sa.VARCHAR(length=500), autoincrement=False, nullable=False))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('weekly_habit_challenge_user_id_fkey', 'user', ['user_id'], ['id'], ondelete='CASCADE')
        batch_op.drop_constraint('_user_habit_week_uc', type_='unique')
        batch_op.create_unique_constraint('weekly_habit_challenge_user_id_week_number_year_key', ['user_id', 'week_number', 'year'])
        batch_op.drop_column('bonus_points_earned')
        batch_op.drop_column('days_completed')
        batch_op.drop_column('challenge_id')

    with op.batch_alter_table('weekly_challenge_set', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('weekly_challenge_set_challenge_id_fkey', 'challenge', ['challenge_id'], ['id'], ondelete='CASCADE')
        batch_op.drop_constraint('_week_challenge_uc', type_='unique')
        batch_op.create_unique_constraint('weekly_challenge_set_week_number_year_challenge_id_key', ['week_number', 'year', 'challenge_id'])
        batch_op.create_index('idx_weekly_challenge_set_week_year', ['week_number', 'year'], unique=False)

    with op.batch_alter_table('user_weekly_order', schema=None) as batch_op:
        batch_op.add_column(sa.Column('challenge_order', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('user_weekly_order_user_id_fkey', 'user', ['user_id'], ['id'], ondelete='CASCADE')
        batch_op.drop_constraint('_user_week_diff_pos_uc', type_='unique')
        batch_op.drop_constraint('_user_week_challenge_uc', type_='unique')
        batch_op.create_unique_constraint('user_weekly_order_user_id_week_number_year_key', ['user_id', 'week_number', 'year'])
        batch_op.drop_column('order_position')
        batch_op.drop_column('difficulty')
        batch_op.drop_column('challenge_id')

    with op.batch_alter_table('user_challenge', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('user_challenge_user_id_fkey', 'user', ['user_id'], ['id'], ondelete='CASCADE')
        batch_op.create_foreign_key('user_challenge_challenge_id_fkey', 'challenge', ['challenge_id'], ['id'], ondelete='CASCADE')
        batch_op.drop_constraint('_user_challenge_week_uc', type_='unique')
        batch_op.create_unique_constraint('user_challenge_user_id_challenge_id_key', ['user_id', 'challenge_id'])
        batch_op.create_index('idx_user_challenge_user_id', ['user_id'], unique=False)
        batch_op.alter_column('status',
               existing_type=sa.VARCHAR(length=10),
               nullable=True,
               existing_server_default=sa.text("'pending'::character varying"))
        batch_op.alter_column('year',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('2025'))
        batch_op.alter_column('week_number',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('1'))
        batch_op.drop_column('points_earned')
        batch_op.drop_column('completed_at')

    with op.batch_alter_table('user_achievement', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('user_achievement_user_id_fkey', 'user', ['user_id'], ['id'], ondelete='CASCADE')
        batch_op.drop_constraint('_user_achievement_uc', type_='unique')
        batch_op.create_unique_constraint('user_achievement_user_id_achievement_id_key', ['user_id', 'achievement_id'])

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.create_index('idx_user_username', ['username'], unique=False)
        batch_op.alter_column('password_hash',
               existing_type=sa.String(length=128),
               type_=sa.VARCHAR(length=512),
               existing_nullable=True)

    with op.batch_alter_table('notification', schema=None) as batch_op:
        batch_op.add_column(sa.Column('is_read', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('title', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('type', sa.VARCHAR(length=50), server_default=sa.text("'info'::character varying"), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('notification_user_id_fkey', 'user', ['user_id'], ['id'], ondelete='CASCADE')
        batch_op.drop_column('read')

    with op.batch_alter_table('friend_token_usage', schema=None) as batch_op:
        batch_op.add_column(sa.Column('week_number', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('year', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('is_weekly', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('friend_token_usage_user_id_fkey', 'user', ['user_id'], ['id'], ondelete='CASCADE')
        batch_op.create_index('idx_friend_token_weekly', ['user_id', 'week_number', 'year'], unique=True, postgresql_where='(is_weekly = true)')
        batch_op.alter_column('used_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))

    with op.batch_alter_table('friend_challenge_link', schema=None) as batch_op:
        batch_op.add_column(sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('initiator_id', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('recipient_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('recipient_code', sa.VARCHAR(length=10), autoincrement=False, nullable=False))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('friend_challenge_link_challenge_id_fkey', 'challenge', ['challenge_id'], ['id'], ondelete='CASCADE')
        batch_op.create_foreign_key('friend_challenge_link_recipient_id_fkey', 'user', ['recipient_id'], ['id'], ondelete='CASCADE')
        batch_op.create_foreign_key('friend_challenge_link_initiator_id_fkey', 'user', ['initiator_id'], ['id'], ondelete='CASCADE')
        batch_op.drop_column('completion_expires_at')
        batch_op.drop_column('user2_completed_at')
        batch_op.drop_column('user1_completed_at')
        batch_op.drop_column('user2_completed')
        batch_op.drop_column('user1_completed')
        batch_op.drop_column('user2_confirmed')
        batch_op.drop_column('user1_confirmed')
        batch_op.drop_column('user2_id')
        batch_op.drop_column('user1_id')

    with op.batch_alter_table('completed_challenge', schema=None) as batch_op:
        batch_op.add_column(sa.Column('friend_linked', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('week_number', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('year', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('completed_challenge_user_id_fkey', 'user', ['user_id'], ['id'], ondelete='CASCADE')
        batch_op.create_foreign_key('completed_challenge_challenge_id_fkey', 'challenge', ['challenge_id'], ['id'], ondelete='CASCADE')
        batch_op.create_index('idx_completed_challenge_week_year', ['week_number', 'year'], unique=False)
        batch_op.create_index('idx_completed_challenge_user_id', ['user_id'], unique=False)

    with op.batch_alter_table('challenge_regeneration', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('challenge_regeneration_user_id_fkey', 'user', ['user_id'], ['id'], ondelete='CASCADE')
        batch_op.create_unique_constraint('challenge_regeneration_user_id_difficulty_slot_number_key', ['user_id', 'difficulty', 'slot_number'])

    with op.batch_alter_table('challenge_of_the_week', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('challenge_of_the_week_challenge_id_fkey', 'challenge', ['challenge_id'], ['id'], ondelete='CASCADE')
        batch_op.drop_constraint('_user_cotw_week_uc', type_='unique')
        batch_op.create_unique_constraint('challenge_of_the_week_week_number_year_key', ['week_number', 'year'])
        batch_op.drop_column('times_completed')
        batch_op.drop_column('last_completed')
        batch_op.drop_column('user_id')

    op.create_table('fun_fact',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('fact', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='fun_fact_pkey')
    )
    op.create_table('achievement',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('message', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('icon_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('criteria', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('threshold', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='achievement_pkey')
    )
    # ### end Alembic commands ###
